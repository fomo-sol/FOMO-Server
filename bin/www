#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("backend-express:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// WebSocket 서버 추가
const WebSocket = require("ws");
const wss = new WebSocket.Server({ server, path: "/wsClient" });
const wsClientHandler = require("../bWebSocket/wsClientHandler");
wss.on("connection", wsClientHandler.handleConnection);

// 한국투자증권 WebSocket 연결 (해외주식만)
const { connectOverseasWS } = require("../bWebSocket/wsHantuHandler");
const appKey = process.env.APP_KEY;
const appSecret = process.env.APP_SECRET;
if (!appKey || !appSecret) {
  console.error("APP_KEY, APP_SECRET 환경변수를 설정하세요.");
  process.exit(1);
}
connectOverseasWS(appKey, appSecret, "DAMSSPY");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, "0.0.0.0");
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("✅ 서버 실행됨: http://localhost:" + addr.port);
}
