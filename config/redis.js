const { createClient } = require("redis");
require("dotenv").config();

const requiredEnv = ["REDIS_HOST", "REDIS_PORT", "REDIS_PASSWORD"];
for (const key of requiredEnv) {
  if (!process.env[key]) {
    console.error(`‚ùå Missing required Redis env: ${key}`);
    process.exit(1);
  }
}

const redis = createClient({
  socket: {
    host: process.env.REDIS_HOST,
    port: Number(process.env.REDIS_PORT),
    connectTimeout: 10000, // 10Ï¥à Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ
    commandTimeout: 5000, // 5Ï¥à Î™ÖÎ†π ÌÉÄÏûÑÏïÑÏõÉ
    keepAlive: 30000, // 30Ï¥à keep-alive
    reconnectStrategy: (retries) => {
      if (retries > 20) {
        console.error("‚ùå Redis Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º");
        return new Error("Too many Redis reconnect attempts");
      }
      const delay = Math.min(retries * 1000, 10000); // ÏµúÎåÄ 10Ï¥à
      console.log(`üîÅ Redis Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ${retries}/20 (${delay}ms ÌõÑ)`);
      return delay;
    },
  },
  username: process.env.REDIS_USERNAME,
  password: process.env.REDIS_PASSWORD,
  retryDelayOnFailover: 100,
  enableReadyCheck: false,
  maxRetriesPerRequest: 3,
});

redis.on("connect", () => console.log("‚úÖ Redis connected"));
redis.on("ready", () => console.log("‚úÖ Redis ready"));
redis.on("reconnecting", () => console.log("üîÅ Redis reconnecting..."));
redis.on("end", () => console.log("‚õîÔ∏è Redis connection closed"));
redis.on("error", (err) => {
  console.error("‚ùå Redis Client Error:", err.message);
  // ETIMEDOUT ÏóêÎü¨Îäî Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ Ï§ëÏù¥ÎØÄÎ°ú Î°úÍ∑∏ Î†àÎ≤® ÎÇÆÏ∂§
  if (err.code !== "ETIMEDOUT") {
    console.error("‚ùå Redis Error Details:", err);
  }
});

// Ïó∞Í≤∞ Í¥ÄÎ¶¨
let isConnecting = false;
let connectionPromise = null;

async function ensureConnection() {
  if (redis.isReady) {
    return redis;
  }

  if (isConnecting) {
    return connectionPromise;
  }

  isConnecting = true;
  connectionPromise = redis
    .connect()
    .catch((err) => {
      console.error("‚ùå Redis Ïó∞Í≤∞ Ïã§Ìå®:", err.message);
      isConnecting = false;
      throw err;
    })
    .then(() => {
      isConnecting = false;
      return redis;
    });

  return connectionPromise;
}

// Ï¥àÍ∏∞ Ïó∞Í≤∞
(async () => {
  try {
    await ensureConnection();
  } catch (err) {
    console.error("‚ùå Initial Redis connection failed:", err.message);
  }
})();

module.exports = { redis, ensureConnection };
